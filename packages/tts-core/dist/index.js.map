{"version":3,"sources":["../src/index.ts"],"sourcesContent":["export interface TtsRuntimeConfig {\n  pauses: Record<string, number>;\n  logger?: {\n    debug?: (...args: unknown[]) => void;\n    info?: (...args: unknown[]) => void;\n    warn?: (...args: unknown[]) => void;\n    error?: (...args: unknown[]) => void;\n  };\n}\n\nexport interface TtsProviderContext {\n  config: TtsRuntimeConfig;\n}\n\nexport interface TtsProvider {\n  id: string;\n  synthesize(ssml: string): Promise<Buffer>;\n}\n\nexport type TtsProviderFactory<Options extends object = Record<string, unknown>> = {\n  id: string;\n  create: (ctx: TtsProviderContext, options: Options) => TtsProvider;\n};\n\nexport class TtsConductor {\n  private providers = new Map<string, TtsProviderFactory<Record<string, unknown>>>();\n\n  constructor(private readonly config: TtsRuntimeConfig) {}\n\n  registerProvider(factory: TtsProviderFactory<Record<string, unknown>>) {\n    this.providers.set(factory.id, factory);\n    this.config.logger?.debug?.('Registered provider', factory.id);\n  }\n\n  hasProvider(id: string): boolean {\n    return this.providers.has(id);\n  }\n\n  listProviders(): string[] {\n    return Array.from(this.providers.keys());\n  }\n\n  createProvider<Options extends object>(id: string, options: Options) {\n    const factory = this.providers.get(id) as TtsProviderFactory<Options> | undefined;\n    if (!factory) {\n      throw new Error(`Provider '${id}' is not registered`);\n    }\n    this.config.logger?.info?.('Creating provider instance', id);\n    return factory.create({ config: this.config }, options);\n  }\n}\n\nexport function createTtsConductor(config: TtsRuntimeConfig): TtsConductor {\n  return new TtsConductor(config);\n}\n"],"mappings":";AAwBO,IAAM,eAAN,MAAmB;AAAA,EAGxB,YAA6B,QAA0B;AAA1B;AAF7B,SAAQ,YAAY,oBAAI,IAAyD;AAAA,EAEzB;AAAA,EAExD,iBAAiB,SAAsD;AACrE,SAAK,UAAU,IAAI,QAAQ,IAAI,OAAO;AACtC,SAAK,OAAO,QAAQ,QAAQ,uBAAuB,QAAQ,EAAE;AAAA,EAC/D;AAAA,EAEA,YAAY,IAAqB;AAC/B,WAAO,KAAK,UAAU,IAAI,EAAE;AAAA,EAC9B;AAAA,EAEA,gBAA0B;AACxB,WAAO,MAAM,KAAK,KAAK,UAAU,KAAK,CAAC;AAAA,EACzC;AAAA,EAEA,eAAuC,IAAY,SAAkB;AACnE,UAAM,UAAU,KAAK,UAAU,IAAI,EAAE;AACrC,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,aAAa,EAAE,qBAAqB;AAAA,IACtD;AACA,SAAK,OAAO,QAAQ,OAAO,8BAA8B,EAAE;AAC3D,WAAO,QAAQ,OAAO,EAAE,QAAQ,KAAK,OAAO,GAAG,OAAO;AAAA,EACxD;AACF;AAEO,SAAS,mBAAmB,QAAwC;AACzE,SAAO,IAAI,aAAa,MAAM;AAChC;","names":[]}