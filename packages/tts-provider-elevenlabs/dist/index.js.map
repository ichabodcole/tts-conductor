{"version":3,"sources":["../src/elevenLabsProvider.ts"],"sourcesContent":["import { ElevenLabsClient } from '@elevenlabs/elevenlabs-js';\nimport type { ElevenLabs as ElevenLabsTypes } from '@elevenlabs/elevenlabs-js';\nimport type {\n  GenerationResult,\n  ProviderCapabilities,\n  TtsProvider,\n  TtsProviderContext,\n  TtsProviderFactory,\n} from '@tts-conductor/core';\nimport { getAudioDuration } from '@tts-conductor/core';\n\nexport interface ElevenLabsVoiceSettings {\n  stability?: number | null;\n  use_speaker_boost?: boolean | null;\n  similarity_boost?: number | null;\n  style?: number | null;\n  speed?: number | null;\n}\n\nexport type ElevenLabsQuality = 'draft' | 'standard' | 'high';\n\nexport interface ElevenLabsProviderOptions {\n  apiKey: string;\n  voiceId: string;\n  voiceSettings?: ElevenLabsVoiceSettings;\n  quality?: ElevenLabsQuality;\n}\n\nconst CAPS: ProviderCapabilities = {\n  maxInlineBreakSeconds: 3,\n  maxCharsPerRequest: 1200,\n  renderInlineBreak: (seconds) => `<break time=\"${seconds}s\" />`,\n};\n\nclass ElevenLabsProvider implements TtsProvider {\n  readonly caps = CAPS;\n  private client: ElevenLabsClient;\n\n  constructor(\n    private readonly ctx: TtsProviderContext,\n    private readonly options: ElevenLabsProviderOptions,\n  ) {\n    this.client = new ElevenLabsClient({ apiKey: options.apiKey });\n  }\n\n  async generate(chunk: string): Promise<GenerationResult> {\n    const { voiceId, quality = 'standard', voiceSettings } = this.options;\n    const logger = this.ctx.config.logger;\n\n    const modelMap: Record<ElevenLabsQuality, string> = {\n      draft: 'eleven_turbo_v2_5',\n      standard: 'eleven_multilingual_v2',\n      high: 'eleven_multilingual_v2',\n    };\n\n    const convertOptions: ElevenLabsTypes.TextToSpeechRequest = {\n      text: chunk,\n      outputFormat: 'mp3_44100_128',\n      modelId: modelMap[quality] ?? modelMap.standard,\n    };\n\n    if (voiceSettings) {\n      convertOptions.voiceSettings = voiceSettings as ElevenLabsTypes.VoiceSettings;\n    }\n\n    logger?.info?.('[11labs] convert start', { voiceId, modelId: convertOptions.modelId });\n\n    try {\n      const audioStream = await this.client.textToSpeech.convert(voiceId, convertOptions);\n      const buffer = await streamToBuffer(audioStream);\n\n      logger?.info?.('[11labs] convert done', { bytes: buffer.length });\n\n      const duration = await getAudioDuration(buffer, this.ctx.config.ffmpeg, logger);\n      logger?.info?.('[11labs] duration', { duration });\n\n      return {\n        audio: buffer,\n        mimeType: 'audio/mpeg',\n        duration,\n        size: buffer.length,\n      };\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      logger?.error?.('[11labs] generation error', { message });\n      throw new Error(`ElevenLabs generation failed: ${message}`);\n    }\n  }\n}\n\ntype ElevenLabsStream = ReadableStream<Uint8Array> | NodeJS.ReadableStream;\n\nasync function streamToBuffer(stream: ElevenLabsStream): Promise<Buffer> {\n  if ('getReader' in stream && typeof stream.getReader === 'function') {\n    const reader = stream.getReader();\n    const chunks: Uint8Array[] = [];\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        if (value) chunks.push(value);\n      }\n    } finally {\n      reader.releaseLock();\n    }\n\n    return Buffer.concat(chunks.map((chunk) => Buffer.from(chunk)));\n  }\n\n  const nodeChunks: Buffer[] = [];\n  const nodeStream = stream as NodeJS.ReadableStream;\n  return new Promise<Buffer>((resolve, reject) => {\n    nodeStream.on('data', (data) =>\n      nodeChunks.push(Buffer.isBuffer(data) ? data : Buffer.from(data)),\n    );\n    nodeStream.on('end', () => resolve(Buffer.concat(nodeChunks)));\n    nodeStream.on('error', reject);\n  });\n}\n\nexport const elevenLabsProviderFactory: TtsProviderFactory<ElevenLabsProviderOptions> = {\n  id: '11labs',\n  create(ctx, options) {\n    if (!options.apiKey) {\n      throw new Error('ElevenLabs provider requires an apiKey');\n    }\n    if (!options.voiceId) {\n      throw new Error('ElevenLabs provider requires a voiceId');\n    }\n    return new ElevenLabsProvider(ctx, options);\n  },\n};\n"],"mappings":"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","names":[]}